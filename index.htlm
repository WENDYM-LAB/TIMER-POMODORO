<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pomodoro DeepWork</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: #eaf9f5;
            min-height: 100vh;
        }
        .timer-circle {
            width: 280px;
            height: 280px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.5);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        .timer-circle::before {
            content: '';
            position: absolute;
            width: 260px;
            height: 260px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
        }
        .progress-ring {
            transform: rotate(-90deg);
        }
        .button {
            transition: all 0.3s ease;
        }
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        .quote-box {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #6319c3;
        }
        .logo-container {
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
            border: 2px solid #eaf9f5;
            overflow: hidden;
            position: relative;
            transition: all 0.3s ease;
        }
        .logo-container:hover {
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
            transform: translateY(-2px);
        }
        .logo-placeholder {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            width: 100%;
            background: linear-gradient(135deg, #eaf9f5 0%, #ffffff 100%);
            position: relative;
        }
        .logo-placeholder::after {
            content: '';
            position: absolute;
            width: 80%;
            height: 80%;
            border: 2px dashed #004cf2;
            border-radius: 12px;
            opacity: 0.3;
        }
        .main-container {
            background: linear-gradient(135deg, #ffffff 0%, #eaf9f5 100%);
            border-radius: 24px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.8);
        }
        .session-counter {
            background: #6319c3;
            color: #ffffff;
        }
        .mode-display {
            background: #004cf2;
            color: #ffffff;
        }
        .input-field {
            background: #ffffff;
            border: 2px solid #eaf9f5;
            color: #004cf2;
        }
        .input-field:focus {
            border-color: #fba536;
            outline: none;
        }
        .logo-shine {
            position: absolute;
            top: 0;
            left: -100%;
            width: 50%;
            height: 100%;
            background: linear-gradient(
                to right,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.3) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            animation: shine 3s infinite;
        }
        @keyframes shine {
            0% { left: -100%; }
            20% { left: 100%; }
            100% { left: 100%; }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center p-6">
    <div class="container max-w-3xl mx-auto">
        <div class="flex flex-col md:flex-row items-center justify-between mb-8 gap-6">
            <!-- Logo Space -->
            <div class="logo-container p-2 w-full md:w-64 h-24 flex items-center justify-center">
                <div class="logo-placeholder">
                    <div class="logo-shine"></div>
                    <div class="text-center">
                        <p class="text-lg font-semibold text-[#004cf2]">Tu Logo</p>
                        <p class="text-xs opacity-70 text-[#6319c3]">Personaliza con tu marca</p>
                    </div>
                </div>
            </div>
            
            <h1 class="text-3xl md:text-4xl font-bold text-[#004cf2] text-center md:text-left">Pomodoro DeepWork</h1>
        </div>
        
        <div class="main-container p-8 shadow-xl">
            <div class="flex flex-col items-center">
                <!-- Timer Circle -->
                <div class="timer-circle mb-8">
                    <svg class="progress-ring" width="280" height="280">
                        <circle 
                            class="progress-ring-circle" 
                            stroke="#004cf2" 
                            stroke-width="8"
                            fill="transparent"
                            r="130"
                            cx="140"
                            cy="140"
                        />
                    </svg>
                    <div class="absolute text-center">
                        <div id="time" class="text-6xl font-bold text-[#004cf2]">25:00</div>
                        <div id="mode" class="text-xl mt-2 text-[#6319c3]">Trabajo</div>
                    </div>
                </div>
                
                <!-- Controls -->
                <div class="flex gap-4 mb-8">
                    <button id="startBtn" class="button bg-[#004cf2] hover:bg-[#003bc0] text-white px-6 py-3 rounded-full font-medium">
                        Iniciar
                    </button>
                    <button id="resetBtn" class="button bg-[#ff5362] hover:bg-[#e04050] text-white px-6 py-3 rounded-full font-medium">
                        Reiniciar
                    </button>
                </div>
                
                <!-- Session Counter -->
                <div class="flex gap-4 mb-8">
                    <div class="session-counter rounded-lg px-4 py-2 text-center">
                        <div class="text-white text-sm">Sesiones</div>
                        <div id="sessionCount" class="text-white text-xl font-bold">0</div>
                    </div>
                    <div class="mode-display rounded-lg px-4 py-2 text-center">
                        <div class="text-white text-sm">Modo</div>
                        <div id="modeDisplay" class="text-white text-xl font-bold">Trabajo</div>
                    </div>
                </div>
                
                <!-- Settings -->
                <div class="w-full mb-8">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-[#6319c3] text-sm mb-1">Tiempo de trabajo (min)</label>
                            <input id="workTime" type="number" min="1" max="60" value="25" class="input-field w-full rounded-lg px-3 py-2">
                        </div>
                        <div>
                            <label class="block text-[#6319c3] text-sm mb-1">Tiempo de descanso (min)</label>
                            <input id="breakTime" type="number" min="1" max="30" value="5" class="input-field w-full rounded-lg px-3 py-2">
                        </div>
                    </div>
                </div>
                
                <!-- Quote Box -->
                <div class="quote-box w-full p-5 mb-4">
                    <h3 class="text-[#6319c3] text-lg font-semibold mb-2">Mensaje motivador:</h3>
                    <p id="quote" class="text-[#004cf2] text-lg italic">¡Inicia tu sesión para ver un mensaje motivador!</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const timeDisplay = document.getElementById('time');
        const modeDisplay = document.getElementById('mode');
        const modeDisplaySmall = document.getElementById('modeDisplay');
        const startBtn = document.getElementById('startBtn');
        const resetBtn = document.getElementById('resetBtn');
        const sessionCountDisplay = document.getElementById('sessionCount');
        const workTimeInput = document.getElementById('workTime');
        const breakTimeInput = document.getElementById('breakTime');
        const quoteDisplay = document.getElementById('quote');
        const progressRing = document.querySelector('.progress-ring-circle');
        
        // Timer variables
        let timer;
        let isRunning = false;
        let isWorkMode = true;
        let timeLeft;
        let totalTime;
        let sessionCount = 0;
        
        // Progress ring setup
        const radius = progressRing.r.baseVal.value;
        const circumference = 2 * Math.PI * radius;
        progressRing.style.strokeDasharray = `${circumference} ${circumference}`;
        progressRing.style.strokeDashoffset = circumference;
        
        // Positive psychology phrases for education
        const positiveEducationPhrases = [
            "Cada vez que aprendes algo nuevo, tu cerebro se hace más fuerte.",
            "¡Qué bien lo haces cuando pones tu atención en ello!",
            "Confía en ti y en todas tus ideas maravillosas.",
            "Aprender contigo es una aventura emocionante.",
            "Tú tienes una forma especial de aprender, y eso te hace único(a).",
            "Me encanta cómo exploras y descubres cosas nuevas.",
            "Tu esfuerzo y dedicación hacen que logres grandes cosas.",
            "Siempre encuentras una manera creativa de resolver las cosas."
        ];
        
        // Update progress ring
        function setProgress(percent) {
            const offset = circumference - (percent / 100 * circumference);
            progressRing.style.strokeDashoffset = offset;
        }
        
        // Format time as MM:SS
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60).toString().padStart(2, '0');
            const secs = (seconds % 60).toString().padStart(2, '0');
            return `${mins}:${secs}`;
        }
        
        // Update timer display
        function updateDisplay() {
            timeDisplay.textContent = formatTime(timeLeft);
            const progressPercent = ((totalTime - timeLeft) / totalTime) * 100;
            setProgress(progressPercent);
        }
        
        // Show a random positive education phrase
        function showRandomPhrase() {
            const randomIndex = Math.floor(Math.random() * positiveEducationPhrases.length);
            quoteDisplay.textContent = positiveEducationPhrases[randomIndex];
        }
        
        // Start timer
        function startTimer() {
            if (isRunning) {
                clearInterval(timer);
                startBtn.textContent = 'Continuar';
                isRunning = false;
                return;
            }
            
            // If timer is not set or reset was clicked
            if (timeLeft === undefined) {
                isWorkMode = true;
                modeDisplay.textContent = 'Trabajo';
                modeDisplaySmall.textContent = 'Trabajo';
                totalTime = workTimeInput.value * 60;
                timeLeft = totalTime;
                progressRing.style.stroke = '#004cf2'; // Work mode color
            }
            
            startBtn.textContent = 'Pausar';
            isRunning = true;
            
            timer = setInterval(() => {
                timeLeft--;
                updateDisplay();
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    
                    if (isWorkMode) {
                        // Switch to break mode
                        isWorkMode = false;
                        modeDisplay.textContent = 'Descanso';
                        modeDisplaySmall.textContent = 'Descanso';
                        totalTime = breakTimeInput.value * 60;
                        timeLeft = totalTime;
                        progressRing.style.stroke = '#fba536'; // Break mode color
                        sessionCount++;
                        sessionCountDisplay.textContent = sessionCount;
                    } else {
                        // Switch to work mode
                        isWorkMode = true;
                        modeDisplay.textContent = 'Trabajo';
                        modeDisplaySmall.textContent = 'Trabajo';
                        totalTime = workTimeInput.value * 60;
                        timeLeft = totalTime;
                        progressRing.style.stroke = '#004cf2'; // Work mode color
                    }
                    
                    // Show a positive education phrase
                    showRandomPhrase();
                    
                    // Auto-start next session
                    startTimer();
                }
            }, 1000);
        }
        
        // Reset timer
        function resetTimer() {
            clearInterval(timer);
            isRunning = false;
            timeLeft = undefined;
            startBtn.textContent = 'Iniciar';
            isWorkMode = true;
            modeDisplay.textContent = 'Trabajo';
            modeDisplaySmall.textContent = 'Trabajo';
            timeDisplay.textContent = formatTime(workTimeInput.value * 60);
            progressRing.style.stroke = '#004cf2';
            setProgress(0);
        }
        
        // Event listeners
        startBtn.addEventListener('click', startTimer);
        resetBtn.addEventListener('click', resetTimer);
        
        // Initialize display
        timeDisplay.textContent = formatTime(workTimeInput.value * 60);
        
        // Update timer when inputs change
        workTimeInput.addEventListener('change', () => {
            if (!isRunning && isWorkMode) {
                timeDisplay.textContent = formatTime(workTimeInput.value * 60);
            }
        });
        
        breakTimeInput.addEventListener('change', () => {
            if (!isRunning && !isWorkMode) {
                timeDisplay.textContent = formatTime(breakTimeInput.value * 60);
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9479cf36c599a9da',t:'MTc0ODU2MTczOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
